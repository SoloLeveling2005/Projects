import time
import os
import re
from random import randint
import telebot
from telebot import types  # –∫–Ω–æ–ø–∫–∏ Telegram
import datetime
import threading
import sqlite3 as sql
import json

from connect import bot
from create_bd import create_db

# from help import checking_condition, add_user_db_users
from script_assistant import verify_job, insert_user_into_db_requests_connections_couple
from check_req.check_new_request import application_couple_threading

# from check_req.do_checking_application import do_checking_application_couple_threading

print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")


#  –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∫—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ –∏—Ö

def do_checking_application_couple_threading(message):
    applications_thread = threading.Thread(target=do_checking_application_couple, args=(message,))
    applications_thread.daemon = True
    applications_thread.start()


def do_checking_application_couple(message):
    user_id = message.chat.id
    while True:

        with sql.connect('todo.db') as con:
            cur = con.cursor()
            cur.execute(f"""
                            SELECT * FROM do WHERE user_id = {user_id};
                        """)
            request_data = cur.fetchall()
        print(request_data)
        if request_data:
            if request_data[0][1] == "chat":
                bot.send_message(message.chat.id,
                                 f"–ù–∞—à–µ–ª, –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω.",
                                 parse_mode='HTML')
                print("–ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª")

                chat(message)

            elif request_data[0][1] == "main_menu":
                bot.send_message(message.chat.id,
                                 f"–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω",
                                 parse_mode='HTML')
                print("–æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫")
                main_menu(message)
        time.sleep(1)


#  –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∫—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ –∏—Ö


create_db()
application_couple_threading()

# do_checking_application_couple_threading()

@bot.message_handler(commands=['start'])
def start(message):
    # verify_job(message, where_was_called="start")

    main_menu(message)


# @bot.message_handler(commands=['main_menu'])
def main_menu(message):
    user_id = message.chat.id
    # verify_job(message, where_was_called="main_menu")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    find_chat_button = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
    markup.add(find_chat_button)
    # find_group_button = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã')
    # markup.add(find_group_button)

    # –î–ª—è –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–µ–ª–∞–µ–º  —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    with sql.connect('todo.db') as con:
        cur = con.cursor()
        cur.execute(f"""
                        SELECT * FROM users WHERE user_id = {user_id};
                    """)
        user = cur.fetchall()
    if user:
        if user[0][3] == "premium":
            create_group_button = types.KeyboardButton('üîé –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É')
            markup.add(create_group_button)

    bot.send_message(message.chat.id,
                     f"üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                     parse_mode='HTML', reply_markup=markup)

    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        if message.text == 'üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
            find_chat(message)
        elif message.text == 'üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã':
            find_group(message)
        elif message.text == 'üîé –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É':
            with sql.connect('todo.db') as con:
                cur = con.cursor()
                cur.execute(f"""
                                SELECT * FROM users WHERE user_id = {user_id};
                            """)
                user_prem = cur.fetchall()
            if user_prem:
                if user_prem[0][3] == "premium":
                    create_group(message)


# @bot.message_handler(commands=['find_chat'])
def find_chat(message):
    do_checking = True
    user_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_find_button = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞')
    markup.add(cancel_find_button)
    bot.send_message(message.chat.id,
                     f"üîé–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...",
                     parse_mode='HTML', reply_markup=markup)

    insert_user_into_db_requests_connections_couple(message)  # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Ö–æ–¥
    do_checking_application_couple_threading(message)
    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        global do_checking
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞':
            with sql.connect('todo.db') as con:
                cur = con.cursor()
                cur.execute(f"""
                                UPDATE do,
                                SET do.where_you = "main_menu"
                                WHERE do.user_id = {user_id};
                            """)



# @bot.message_handler(commands=['find_group'])
def find_group(message):
    # verify_job(message, where_was_called="find_group")
    pass


def create_group(message):
    pass


# @bot.message_handler(commands=['cancel_find'])
def cancel_find(message):
    verify_job(message, where_was_called="cancel_find")


# @bot.message_handler(commands=['disconnect'])
def disconnect(message):
    verify_job(message, where_was_called="disconnect")


def chat(message):
    pass


@bot.message_handler(commands=['help'])
def help(message):
    user_id = message.chat.id
    text_help = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /find_chat - –ø–æ–∏—Å–∫ –∞–Ω–æ–Ω–∏–º—É—Å–∞
    """
    with sql.connect('todo.db') as con:
        cur = con.cursor()
        cur.execute(f"""
                        SELECT * FROM users WHERE user_id = {user_id};
                    """)
        user = cur.fetchall()
    if user:
        if user[0][4] == "user_prem":
            text_help += "/find_group - –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –∞–Ω–æ–Ω–∏–º—É—Å"
    else:
        pass
    text_help += """/cancel_find - –æ—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
    /disconnect - –æ—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞
    –í–∞–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –≤–≤–æ–¥–∏—Ç—å, –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ
    """
    bot.send_message(message.chat.id,
                     text_help)


# def chat():
#     @bot.message_handler(content_types=['text'])
#     def get_text_messages(message):
#         if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
#             bot.send_message(message.chat.id,
#                              "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#             # main_menu(message)
#         elif message.text == 'üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
#             find_chat(message)
#         elif message.text == 'üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã':
#             find_group(message)
#         elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞':
#             cancel_find(message)
#         elif message.text == 'üõë –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è':
#             disconnect(message)
#         else:
#             pass


if __name__ == '__main__':
    bot.polling(none_stop=True)
    while True:
        try:
            bot.polling(none_stop=True)
            time.sleep(1)
        except Exception as e:
            time.sleep(3)
            a = datetime.datetime.today()
            print(e)
            print(a)
            bot = telebot.TeleBot('5488566542:AAEGQsiDrnLjwFCQb4kmbn7EJYnZqoaIfxk')
            bot.send_message(1303257033,
                             '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
            os.system('python main.py')
